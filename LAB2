#include <stdio.h>
#include <string.h>

int infixIndex = 0, pos = 0, top = -1, length;
char symbol, temp, infix[20], postfix[20], stack[20];

void infixtopostfix();
void push(char symbol);
char pop();
int pred(char symbol);

void main() {
    printf("Enter infix expression:\n");
    scanf("%s", infix);

    length = strlen(infix); // Set length of the infix expression
    push('#');  // Push a sentinel character onto the stack

    while (infixIndex < length) {
        symbol = infix[infixIndex];

        switch (symbol) {
            case '(':
                push(symbol);
                break;

            case ')':
                temp = pop();
                while (temp != '(') {
                    postfix[pos++] = temp;
                    temp = pop();
                }
                break;

            case '+':  // Operator case for +, -, *, /
            case '-':
            case '*':
            case '/':
                while (pred(stack[top]) >= pred(symbol)) {
                    temp = pop();
                    postfix[pos++] = temp;
                }
                push(symbol);
                break;

            default:  // Operand case (e.g., a variable or number)
                postfix[pos++] = symbol;
                break;
        }
        infixIndex++;
    }

    // Pop remaining operators from the stack
    while (top > 0) {
        temp = pop();
        postfix[pos++] = temp;
    }

    postfix[pos] = '\0';  // Null terminate the postfix expression

    printf("\nInfix expression: %s", infix);
    printf("\nPostfix expression: %s", postfix);
}

void push(char symbol) {
    top = top + 1;
    stack[top] = symbol;
}

char pop() {
    char symb;
    symb = stack[top];
    top = top - 1;
    return symb;
}

int pred(char symbol) {
    int p;
    switch (symbol) {
        case '*': 
        case '/': p = 2; break;
        case '+': 
        case '-': p = 1; break;
        case '(': p = 0; break;
        case '#': p = -1; break;
        default: p = 0; break;  // In case of unexpected symbol
    }
    return p;
}
