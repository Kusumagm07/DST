#include <stdio.h>
#include <stdlib.h>

// Define the structure for a node
struct node {
    int data;
    struct node* next;
};

// Function to insert a node at the beginning
void insertatbeginning(struct node** head, int data) {
    struct node* newnode = (struct node*)malloc(sizeof(struct node));
    newnode->data = data;
    newnode->next = *head;
    *head = newnode;
}

// Function to insert a node at the end
void insertatend(struct node** head, int data) {
    struct node* newnode = (struct node*)malloc(sizeof(struct node));
    newnode->data = data;
    newnode->next = NULL;

    if (*head == NULL) {
        *head = newnode;
    } else {
        struct node* temp = *head;
        while (temp->next != NULL) {
            temp = temp->next;
        }
        temp->next = newnode;
    }
}

// Function to insert a node at a specific position
void insertatposition(struct node** head, int data, int position) {
    struct node* newnode = (struct node*)malloc(sizeof(struct node));
    newnode->data = data;

    if (position == 0) {
        newnode->next = *head;
        *head = newnode;
        return;
    }

    struct node* temp = *head;
    for (int i = 0; temp != NULL && i < position - 1; i++) {
        temp = temp->next;
    }

    if (temp == NULL) {
        printf("Position out of range!\n");
        return;
    }

    newnode->next = temp->next;
    temp->next = newnode;
}

// Function to display all elements in the list
void listelements(struct node* head) {
    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }
    struct node* temp = head;
    while (temp != NULL) {
        printf("%d -> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

int main() {
    struct node* head = NULL;
    int data;
    int choice;
    int position;

    // Input data to add to the list
    printf("Enter numbers to add to the list (Enter -1 to stop): \n");
    while (1) {
        scanf("%d", &data);
        if (data == -1) {
            break;
        }
        insertatend(&head, data); // Always insert at the end for initial list
    }

    // Display the initial list
    printf("Initial list:\n");
    listelements(head);

    while (1) {
        printf("\n1. Insert at the beginning\n");
        printf("2. Insert at the end\n");
        printf("3. Insert at a specific position\n");
        printf("4. List elements\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter data to insert at the beginning: ");
                scanf("%d", &data);
                insertatbeginning(&head, data);
                break;
            case 2:
                printf("Enter data to insert at the end: ");
                scanf("%d", &data);
                insertatend(&head, data);
                break;
            case 3:
                printf("Enter position to insert at: ");
                scanf("%d", &position);
                printf("Enter data to insert: ");
                scanf("%d", &data);
                insertatposition(&head, data, position);
                break;
            case 4:
                listelements(head);
                continue;
            case 5:
                return 0;
            default:
                printf("Invalid choice! \n");
                continue;
        }

        // Display the updated list
        printf("Updated list:\n");
        listelements(head);
    }

    return 0;
}
