#include <stdio.h>
#include <stdlib.h>

// Definition of a Node
struct Node {
    int data;
    struct Node* next;
};

// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// ================= Stack Operations =====================

// Push operation for Stack
void push(struct Node** top, int data) {
    struct Node* newNode = createNode(data);
    newNode->next = *top;
    *top = newNode;
    printf("Pushed %d to stack\n", data);
}

// Pop operation for Stack
int pop(struct Node** top) {
    if (*top == NULL) {
        printf("Stack is empty!\n");
        return -1; // Return -1 if stack is empty
    }
    struct Node* temp = *top;
    int data = temp->data;
    *top = (*top)->next;
    free(temp);
    printf("Popped %d from stack\n", data);
    return data;
}

// Display operation for Stack
void displayStack(struct Node* top) {
    if (top == NULL) {
        printf("Stack is empty!\n");
        return;
    }
    printf("Stack: ");
    struct Node* temp = top;
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

// Check if the Stack is empty
int isEmptyStack(struct Node* top) {
    return top == NULL;
}

// ================= Queue Operations =====================

// Enqueue operation for Queue
void enqueue(struct Node** front, struct Node** rear, int data) {
    struct Node* newNode = createNode(data);
    if (*rear == NULL) {
        *front = *rear = newNode;
        printf("Enqueued %d to queue\n", data);
        return;
    }
    (*rear)->next = newNode;
    *rear = newNode;
    printf("Enqueued %d to queue\n", data);
}

// Dequeue operation for Queue
int dequeue(struct Node** front) {
    if (*front == NULL) {
        printf("Queue is empty!\n");
        return -1; // Return -1 if queue is empty
    }
    struct Node* temp = *front;
    int data = temp->data;
    *front = (*front)->next;
    free(temp);
    printf("Dequeued %d from queue\n", data);
    return data;
}

// Display operation for Queue
void displayQueue(struct Node* front) {
    if (front == NULL) {
        printf("Queue is empty!\n");
        return;
    }
    printf("Queue: ");
    struct Node* temp = front;
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

// Front operation for Queue
int frontQueue(struct Node* front) {
    if (front == NULL) {
        printf("Queue is empty!\n");
        return -1;
    }
    return front->data;
}

// Check if the Queue is empty
int isEmptyQueue(struct Node* front) {
    return front == NULL;
}

// ================= Main Function =========================

int main() {
    struct Node* stackTop = NULL;
    struct Node* queueFront = NULL;
    struct Node* queueRear = NULL;
    int choice, data;

    while (1) {
        printf("\n1. Stack Operations\n");
        printf("2. Queue Operations\n");
        printf("3. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1: // Stack operations
                while (1) {
                    printf("\nStack Operations:\n");
                    printf("1. Push\n");
                    printf("2. Pop\n");
                    printf("3. Display\n");
                    printf("4. Check if Stack is Empty\n");
                    printf("5. Back to Main Menu\n");
                    printf("Enter your choice: ");
                    scanf("%d", &choice);

                    switch (choice) {
                        case 1:
                            printf("Enter data to push: ");
                            scanf("%d", &data);
                            push(&stackTop, data);
                            break;
                        case 2:
                            pop(&stackTop);
                            break;
                        case 3:
                            displayStack(stackTop);
                            break;
                        case 4:
                            if (isEmptyStack(stackTop)) {
                                printf("Stack is empty\n");
                            } else {
                                printf("Stack is not empty\n");
                            }
                            break;
                        case 5:
                            goto stackMenu;
                        default:
                            printf("Invalid choice! Please try again.\n");
                    }
                }
            stackMenu:

            case 2: // Queue operations
                while (1) {
                    printf("\nQueue Operations:\n");
                    printf("1. Enqueue\n");
                    printf("2. Dequeue\n");
                    printf("3. Display\n");
                    printf("4. Front\n");
                    printf("5. Check if Queue is Empty\n");
                    printf("6. Back to Main Menu\n");
                    printf("Enter your choice: ");
                    scanf("%d", &choice);

                    switch (choice) {
                        case 1:
                            printf("Enter data to enqueue: ");
                            scanf("%d", &data);
                            enqueue(&queueFront, &queueRear, data);
                            break;
                        case 2:
                            dequeue(&queueFront);
                            break;
                        case 3:
                            displayQueue(queueFront);
                            break;
                        case 4:
                            printf("Front element is: %d\n", frontQueue(queueFront));
                            break;
                        case 5:
                            if (isEmptyQueue(queueFront)) {
                                printf("Queue is empty\n");
                            } else {
                                printf("Queue is not empty\n");
                            }
                            break;
                        case 6:
                            goto queueMenu;
                        default:
                            printf("Invalid choice! Please try again.\n");
                    }
                }
            queueMenu:

            case 3:
                exit(0);
                break;
            default:
                printf("Invalid choice! Please try again.\n");
        }
    }

    return 0;
}
